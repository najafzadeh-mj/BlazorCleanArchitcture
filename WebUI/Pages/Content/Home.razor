@page "/content/home"
@using Application.DTOs.Request.Vehicles
@using Application.DTOs.Response
@using Application.DTOs.Response.Vehicles
@using Mapster
@using Microsoft.AspNetCore.Authorization
@using NetcodeHub.Packages.Components.Toast
@using NetcodeHub.Packages.Components.DataGrid
@* @inject NetcodeHubToast toastService *@

@attribute [Authorize(Roles = "Admin,User")]
<PageTitle>Home</PageTitle>


<div class="row">
    <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">
        <div class="card border-1 shadow-lg">
            <div class="card-header fw-bold text-info fs-4">
                Vehicle Information
                <button class="btn btn-info float-end" @onclick="AddVehicleClick">+ Add Vehicle</button>
            </div>
            <div class="card-body">
                @if (Vehicles != null)
                {
                    <NetcodeHubDataGrid>
                        <HeaderTemplate>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Brand</th>
                            <th>Owner</th>
                            <th>Action</th>
                        </HeaderTemplate>
                        <ContentTemplate>
                            @foreach(var item in Vehicles){
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.Name</td>
                                    <td>@item.Description</td>
                                    <td>@item.VehicleBrand!.Name</td>
                                    <td>@item.VehicleOwner!.Name</td>
                                    <td>
                                        <small class="text-info cursorStyle" @onclick="()=> EditVehicleClicked(item)">Edit</small>
                                        <AuthorizeView Roles="Admin">
                                            <small class="text-danger" @onclick="()=> DeleteVehicleClicked(item)">Delete</small>
                                        </AuthorizeView>
                                    </td>
                                </tr>
                            }
                        </ContentTemplate>
                    </NetcodeHubDataGrid>
                }
            </div>
        </div>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-xl-6 col-lg-6 col-md-6 col-sm-6">
        <div class="card border-1 shadow-lg">
            <div class="card-header fw-bold text-info fs-4">
                Vehicle Information
                <button class="btn btn-info float-end" @onclick="AddBrandClick">+ Add Vehicle Brand</button>
            </div>
            <div class="card-body">
                @if (Vehicles != null)
                {
                    <NetcodeHubDataGrid>
                        <HeaderTemplate>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Location</th>
                            <th>Action</th>
                        </HeaderTemplate>
                        <ContentTemplate>
                            @foreach (var item in VehicleBrands)
                            {
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.Name</td>
                                    <td>@item.Location</td>
                                    <td>
                                        <small class="text-info cursorStyle" @onclick="()=> EditVehicleBrandClicked(item)">Edit</small>
                                        <AuthorizeView Roles="Admin">
                                            <small class="text-danger" @onclick="()=> DeleteVehicleBrandClicked(item)">Delete</small>
                                        </AuthorizeView>
                                    </td>
                                </tr>
                            }
                        </ContentTemplate>
                    </NetcodeHubDataGrid>
                }
            </div>
        </div>
    </div>
    <div class="col-xl-6 col-lg-6 col-md-6 col-sm-6">
        <div class="card border-1 shadow-lg">
            <div class="card-header fw-bold text-info fs-4">
                Vehicle Information
                <button class="btn btn-info float-end" @onclick="AddOwnerClick">+ Add Vehicle Owner</button>
            </div>
            <div class="card-body">
                @if (Vehicles != null)
                {
                    <NetcodeHubDataGrid>
                        <HeaderTemplate>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Address</th>
                            <th>Action</th>
                        </HeaderTemplate>
                        <ContentTemplate>
                            @foreach (var item in VehicleOwners)
                            {
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.Name</td>
                                    <td>@item.Address</td>
                                    <td>
                                        <small class="text-info cursorStyle" @onclick="()=> EditVehicleOwnerClicked(item)">Edit</small>
                                        <AuthorizeView Roles="Admin">
                                            <small class="text-danger" @onclick="()=> DeleteVehicleOwnerClicked(item)">Delete</small>
                                        </AuthorizeView>
                                    </td>
                                </tr>
                            }
                        </ContentTemplate>
                    </NetcodeHubDataGrid>
                }
            </div>
        </div>
    </div>
</div>




<NetcodeHubModal @bind-Open="IsOpen" BootstrapClass="@BorderClass" CustomStyle="min-width:400px; max-width:500px;">
    <ContentTemplate>
        <div class="card border-1 shadow-lg p-3">
            <div class="card-header">
                @ModalTitle
                <span class="float-end text-danger fw-bold cursorStyle" style="font-family:'Comic Sans MS'" @onclick="CancelForm">X</span>
            </div>
            <div class="card-body">
                @if (ShowVehicleBrandModel)
                {
                    <EditForm Model="CreateVehicleBrandModel" OnValidSubmit="SaveVehicleBrand">
                        <DataAnnotationsValidator />
                        <FloatingText Label="Brand Name" @bind-Value="CreateVehicleBrandModel.Name" class="form-control"></FloatingText>
                        <FloatingText Label="Brand Location" @bind-Value="CreateVehicleBrandModel.Location" class="form-control"></FloatingText>
                        <div class="form-group mt-3">
                            <button class="btn btn-primary float-end" type="submit">Save</button>
                        </div>
                        <div class="input-group mt-3">
                            <ValidationSummary />
                        </div>
                    </EditForm>
                }
                @if (ShowVehicleOwnerModel)
                {
                    <EditForm Model="CreateVehicleOwnerModel" OnValidSubmit="SaveVehicleOwner">
                        <DataAnnotationsValidator />
                        <FloatingText Label="Owner Name" @bind-Value="CreateVehicleOwnerModel.Name" class="form-control"></FloatingText>
                        <FloatingText Label="Owner Location" @bind-Value="CreateVehicleOwnerModel.Address" class="form-control"></FloatingText>
                        <div class="form-group mt-3">
                            <button class="btn btn-primary float-end" type="submit">Save</button>
                        </div>
                        <div class="input-group mt-3">
                            <ValidationSummary />
                        </div>
                    </EditForm>
                }
                @if (ShowVehicleModel)
                {
                    <EditForm Model="CreateVehicleModel" OnValidSubmit="SaveVehicle">
                        <DataAnnotationsValidator />
                        <FloatingText Label="Vehcile Name" @bind-Value="CreateVehicleModel.Name" class="form-control"></FloatingText>
                        <FloatingTextArea Label="Vehicle Description" @bind-Value="CreateVehicleModel.Description" class="form-control"></FloatingTextArea>
                        <label class="form-label mt-2">Select Brand</label>
                        <select class="form-select" @bind="CreateVehicleModel.VehicleBrandId">
                            <option>Select Brand</option>
                            @foreach (var item in VehicleBrands)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </select>

                        <label class="form-label mt-2">Select Owner</label>
                        <select class="form-select" @bind="CreateVehicleModel.VehicleOwnerId">
                            <option>Select Owner</option>
                            @foreach (var item in VehicleOwners)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </select>


                        <div class="form-group mt-3">
                            <button class="btn btn-primary float-end" type="submit">Save</button>
                        </div>
                        <div class="input-group mt-3">
                            <ValidationSummary />
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </ContentTemplate>
</NetcodeHubModal>

@code
{
    private string ModalTitle = string.Empty;
    private string BorderClass = string.Empty;
    private bool IsOpen { get; set; }

    public int ToastDuration { get; set; } = 4000;


    private CreateVehicleRequestDTO CreateVehicleModel { get; set; } = new();
    private CreateVehicleBrandRequestDTO CreateVehicleBrandModel { get; set; } = new();
    private CreateVehicleOwnerRequestDTO CreateVehicleOwnerModel { get; set; } = new();

    private IEnumerable<GetVehicleResponseDTO> Vehicles { get; set; } = [];
    private IEnumerable<GetVehicleBrandResponseDTO> VehicleBrands { get; set; } = [];
    private IEnumerable<GetVehicleOwnerResponseDTO> VehicleOwners { get; set; } = [];

    private bool ShowVehicleModel { get; set; } = false;
    private bool ShowVehicleBrandModel { get; set; } = false;
    private bool ShowVehicleOwnerModel { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        Vehicles = await vehicleService.GetVehicles();
        VehicleBrands = await vehicleService.GetVehicleBrands();
        VehicleOwners = await vehicleService.GetVehicleOwners();
    }
    void EditVehicleClicked(GetVehicleResponseDTO model){
        ModalTitle = "Edit Vehicle Owner";
        ResetAllShowStates();
        ResetAllModels();
        BorderClass = "border-warning rounded p-2 ml-2 mr-2 shadow-lg";
        ShowVehicleModel = true;
        IdHolder = model.Id;
        CreateVehicleModel = model;
        OpenModal();
    }
    void EditVehicleBrandClicked(GetVehicleBrandResponseDTO model){
        ModalTitle = "Edit Vehicle Brand";
        ResetAllShowStates();
        ResetAllModels();
        BorderClass = "border-warning rounded p-2 ml-2 mr-2 shadow-lg";
        ShowVehicleBrandModel = true;
        IdHolder = model.Id;
        CreateVehicleBrandModel = model;
        OpenModal();
    }
    void EditVehicleOwnerClicked(GetVehicleOwnerResponseDTO model)
    {
        ModalTitle = "Edit Vehicle Owner";
        ResetAllShowStates();
        ResetAllModels();
        BorderClass = "border-warning rounded p-2 ml-2 mr-2 shadow-lg";
        ShowVehicleOwnerModel = true;
        IdHolder = model.Id;
        CreateVehicleOwnerModel = model;
        OpenModal();
    }

    void DeleteVehicleClicked(GetVehicleResponseDTO model)
    {
        IdHolder=model.Id;
        ModelName=ModelNames.Vehicle;
        
    }
    void DeleteVehicleBrandClicked(GetVehicleBrandResponseDTO model)
    {
        IdHolder = model.Id;
        ModelName = ModelNames.VehicleBrand;
    }
    void DeleteVehicleOwnerClicked(GetVehicleOwnerResponseDTO model)
    {
        IdHolder = model.Id;
        ModelName = ModelNames.VehicleOwner;
    }

    void AddVehicleClick()
    {
        ModalTitle = "Add Vehicle Owner";
        ResetAllShowStates();
        ResetAllModels();
        BorderClass = "border-warning rounded p-2 ml-2 mr-2 shadow-lg";
        ShowVehicleModel = true;
        OpenModal();
    }
    void AddOwnerClick()
    {
        ModalTitle = "Add Vehicle Owner";
        ResetAllShowStates();
        ResetAllModels();
        BorderClass = "border-warning rounded p-2 ml-2 mr-2 shadow-lg";
        ShowVehicleOwnerModel = true;
        OpenModal();
    }

    void AddBrandClick()
    {
        ModalTitle = "Add Vehicle Brand";
        ResetAllShowStates();
        ResetAllModels();
        BorderClass = "border-warning rounded p-2 ml-2 mr-2 shadow-lg";
        ShowVehicleBrandModel = true;
        OpenModal();
    }

    void CreateVehicle() => ShowVehicleModel = true;
    void CreateVehicleBrand() => ShowVehicleBrandModel = true;
    void CreateVehicleOwner() => ShowVehicleOwnerModel = true;

    void ResetAllModels()
    {
        CreateVehicleModel = new();
        CreateVehicleBrandModel = new();
        CreateVehicleOwnerModel = new();
    }
    void ResetAllShowStates()
    {
        ShowVehicleModel = false;
        ShowVehicleBrandModel = false;
        ShowVehicleOwnerModel = false;
    }

    void CancelForm() => IsOpen = false;
    void OpenModal() => IsOpen = true;

    private int IdHolder = 0;
    public string ModelName = string.Empty;
    GeneralResponse Response = new();
    async Task SaveVehicleBrand()
    {
        if (IdHolder > 0)
        {
            var data = CreateVehicleBrandModel.Adapt(new UpdateVehicleBrandRequestDTO());
            data.Id = IdHolder;
            Response = await vehicleService.UpdateVehicleBrand(data);
        }
        else
        {
            Response = await vehicleService.AddVehicleBrand(CreateVehicleBrandModel);
        }
        ModelName = ModelNames.VehicleBrand;
        await DisplayToastMessage(Response);
        //VehicleBrands = await vehicleService.GetVehicleBrands();
    }
    async Task SaveVehicleOwner()
    {
        if (IdHolder > 0)
        {
            var data = CreateVehicleOwnerModel.Adapt(new UpdateVehicleOwnerRequestDTO());
            data.Id = IdHolder;
            Response = await vehicleService.UpdateVehicleOwner(data);
        }
        else
        {
            Response = await vehicleService.AddVehicleOwner(CreateVehicleOwnerModel);
        }
        ModelName = ModelNames.VehicleOwner;
        await DisplayToastMessage(Response);
        //VehicleOwners = await vehicleService.GetVehicleOwners();

    }

    async Task SaveVehicle()
    {
        if (IdHolder > 0)
        {
            var data = CreateVehicleModel.Adapt(new UpdateVehicleRequestDTO());
            data.Id = IdHolder;
            Response = await vehicleService.UpdateVehicle(data);
        }
        else
        {
            Response = await vehicleService.AddVehicle(CreateVehicleModel);
        }
        ModelName = ModelNames.Vehicle;
        await DisplayToastMessage(Response);
        //Vehicles = await vehicleService.GetVehicles();

    }

    private async Task DisplayToastMessage(GeneralResponse response)
    {
        if (ModelName.Equals(ModelNames.Vehicle, StringComparison.OrdinalIgnoreCase))
            Vehicles = await vehicleService.GetVehicles();
        if (ModelName.Equals(ModelNames.VehicleBrand, StringComparison.OrdinalIgnoreCase))
            VehicleBrands = await vehicleService.GetVehicleBrands();
        if (ModelName.Equals(ModelNames.VehicleOwner, StringComparison.OrdinalIgnoreCase))
            VehicleOwners = await vehicleService.GetVehicleOwners();

        if (response.Flag)
        {
            IsOpen = false;
            //await toastService.ShowSuccessToast("Info", response.Message);
        }
        else
        {
            //await toastService.ShowErrorToast("Alert", response.Message);
        }
        IdHolder = 0;
        ModelName = string.Empty;


    }

    public static class ModelNames
    {
        public const string Vehicle = "Vehicle";
        public const string VehicleBrand = "VehicleBrand";
        public const string VehicleOwner = "VehicleOwner";
    }
}
